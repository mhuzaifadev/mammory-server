
from docx import Document
import docx
from datetime import date
import datetime
from docx.shared import Inches
from docx.shared import Pt
from docx.enum.text import WD_TAB_ALIGNMENT
import os
import subprocess
import tempfile
import io
import pyrebase
import aspose.words as aw
import time


class ReportGeneration():


    def generate_report(self, full_name, date_of_birth, email, lesion, risk_factor, processed_image_grid, classification_text, classification_subtext, report_type):

        #define our variables
        #full_name = "full_name" 
        #date_of_birth = "18/01/2000"
        #email = "zain@1223.com"
        # report_number = 
        #CONVERT TODAY'S DATE as MMDDYYYY-HHMMSS
        report_number = full_name.lower().replace(" ","")+datetime.datetime.now().strftime("%m%d%Y-%H%M%S")
        #lesion = "benign"
        #risk_factor = 0.86
        disclaimer_text = "The results generated by this report using experimental AI (deep learning) and computer vision models developed by Mammory (org) under the supervision of Aga Khan University Hospital are not a substitute for a professional medical evaluation and should not be used to diagnose or treat any medical condition. The results of this test should be considered preliminary and subject to further evaluation by a medical professional. The models were trained on diverse datasets over time, but false predictions are still possible. The entire objective of this application is to assist radiologists, technicians, and doctors in the early detection of symptoms and to prevent delayed treatments. However, Mammory (org) cannot guarantee the accuracy of the results and accepts no liability for any inaccuracies or misinterpretations of test results. These results are not admissible in court and should not be relied upon as a sole source of information."
        #processed_image_grid = "/content/drive/MyDrive/Colab Notebooks/Screen Shot 2023-02-10 at 11.11.21 AM.png"
        path = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__))).replace("\\","/")
        header = path+"/header.jpg"
        footer = path+"/footer.jpg"
        #classification_text = "You are classified with malignant breast cancer with potential symptoms\n"
        #classification_subtext = "A malignant breast cancer diagnosis is a serious matter and requires immediate medical attention. We recommend seeking a second opinion from a trusted doctor to ensure the most accurate information and appropriate treatment plan.\n\nIt's important to stay positive and proactive during this time and do not hesitate in seeking the support and guidance of medical professionals. Early detection is key in successfully managing and treating breast cancer.\n\nRemember, you are not alone in this journey and there is a wealth of resources and support available to you."

        #create document object to call paragraphs
        doc = docx.Document()

        #adding header 
        doc.add_picture(header, width=Inches(5.9), height=Inches(0.75))



        #create paragraph object for each section 
        paragraph1 = doc.add_paragraph()
        paragraph1.add_run("Name: ").bold = True
        paragraph1.add_run(full_name)

        #paragraph 2
        paragraph2 = doc.add_paragraph()
        paragraph2.add_run("Date of Birth: ").bold = True
        paragraph2.add_run(date_of_birth)

        #add spacing
        tab_stop = paragraph2.paragraph_format.tab_stops.add_tab_stop(Inches(6), WD_TAB_ALIGNMENT.RIGHT)

        paragraph2.add_run("\tDate Generated: ").bold = True
        paragraph2.add_run(str(date.today()))

        #paragraph 3
        paragraph3 = doc.add_paragraph()
        paragraph3.add_run("Email Address: ").bold = True
        paragraph3.add_run(email)

        #add spacing
        tab_stop = paragraph3.paragraph_format.tab_stops.add_tab_stop(Inches(6), WD_TAB_ALIGNMENT.RIGHT)

        paragraph3.add_run("\tReport Number: ").bold = True
        paragraph3.add_run(str(report_number))

        #separator
        doc.add_paragraph().add_run(" _____________________________________________________________________________")

        #paragraph for Lesion 
        paragraph4 = doc.add_paragraph()
        paragraph4.add_run("Lesion Classification").bold = True
        tab_stop = paragraph4.paragraph_format.tab_stops.add_tab_stop(Inches(6), WD_TAB_ALIGNMENT.RIGHT)
        paragraph4.add_run("\t"+lesion).bold = True

        #paragraph for Risk Factor
        paragraph5 = doc.add_paragraph()
        paragraph5.add_run("Risk Factor").bold = True
        tab_stop = paragraph5.paragraph_format.tab_stops.add_tab_stop(Inches(6), WD_TAB_ALIGNMENT.RIGHT)
        paragraph5.add_run("\t"+str(risk_factor)+"%").bold = True

        # Process the classification image because image is in bytes stream right now 
        #image_data = self.image_preprocessing_grid(processed_image_grid)

        #adding classification image
        doc.add_picture(processed_image_grid, width=Inches(6.0), height=Inches(2.0))

        #adding classification text and subtext
        doc.add_paragraph().add_run(classification_text).bold = True
        classificationPara = doc.add_paragraph()
        classificationPara.add_run(classification_subtext)

        #adding disclaimer
        disclaimer = doc.add_paragraph() 
        run = disclaimer.add_run("DISCLAIMER:")
        run.font.size = Pt(5)
        run.bold = True
        run = disclaimer.add_run(disclaimer_text)
        run.font.size = Pt(5)

        #create name for my docx file
        file_name = report_number+".docx"

        
        #adding footer
        doc.add_picture(footer, width=Inches(5.9), height=Inches(0.75))
        for section in doc.sections:
            section.top_margin = docx.shared.Inches(0.5)
            section.bottom_margin = docx.shared.Inches(0.5)

        #save docx in system
        doc.save(file_name)

        aspose_doc = aw.Document(file_name) 
        #cloud = cloudconvert.configure(api_key='eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiYWZiZGE3Zjc2Y2QxNjNkNGFjMmQ5MmJlODg3OTFjNmRhMDYwYTU3MWEyZTliZTI5YmU2ZjdhZDBjODk5NzA4ODhiZDM4NGNiN2FhNzE5YjQiLCJpYXQiOjE2NzYxOTk2NTAuNTQ0ODg4LCJuYmYiOjE2NzYxOTk2NTAuNTQ0ODksImV4cCI6NDgzMTg3MzI1MC41MzY0ODcsInN1YiI6IjYyMTAzMjAzIiwic2NvcGVzIjpbInVzZXIucmVhZCIsInVzZXIud3JpdGUiLCJ0YXNrLnJlYWQiLCJ0YXNrLndyaXRlIiwid2ViaG9vay5yZWFkIiwid2ViaG9vay53cml0ZSIsInByZXNldC5yZWFkIiwicHJlc2V0LndyaXRlIl19.NY0p94A7Bo9us-twpJ9vE0uXZ241aNkanPlGzD9xb1sC0zPTl7tpZguXhQcRZyE4ZCZMrzKV91XrLdfXFNZpQvqsirItKuf9LuFwt-v5rSA8dm845uQCJPxCpQWpbNJE-dKIdvbzgiElsrsx2a2wvIQyXNH4UDOYmbKpmDxM2_P31mShJQEACM3AhPvECR9-LXFhT-S5F_WxmufnROPZW6LSW4Uf-QEwKAlVydkSEVZLRexNdqOIvM9_MvmwHJbPPpG2W3T273aKK10yvOQk8_ySjYXBDSF0C4LpT3SKq2Gti9PomhadXKEUoAWfg0ldHvcfHQ1w07dN8Lga1RxqQCZ_OSbalzJEfKz83kCoLCPkguTYpUsV1q4Qj3Ly6ATkEdvnW1uxMQt06OHbkHdGqZ1hhiSmoDmmPuUZkCnTl_ft91zrkgnAtHuP4P9Th71ulPo0dThkj61ZhtPKmHa8tQzU0zNMh9bvqjasqyjRam1D9Y10N5G2-azbFi9E12Dcbp_cyNOLyCMml0xUrlKVrA0K6mSNWZEjpoh4RQ749HFzfT546X336N9L6ihBO1_50SJhcK-Koa5uuqEcbdWBzLIFDYCr6Q5l4m1l0OBQXglaLQpzPJT1cbfFlMBOxwmJxYGJP3OOSIB6LpWvVLpVeQQ2YMwp_ax7YIrVtIToJk8')

        #converting to pdf using subprocess library
        #subprocess.run(["unoconv", "-f", "pdf", file_name])
        #creating a name for my pdf file
        pdf_file_name = report_number+".pdf"
        aspose_doc.save(pdf_file_name, aw.SaveFormat.PDF)
        #api_key = "your_api_key"
        #client = Client(api_key)


        #deleting the docx file
        if os.path.exists(file_name):
            os.remove(file_name)

        data = {"Account ID": email, "Risk Factor": risk_factor, "Message": classification_text, "Lesion": lesion, "Class Type":report_type}

        return pdf_file_name, data

    
    def push_to_firebase(self, pdf_file_name, data):
        #api configuration 
        config = {
            "apiKey": "AIzaSyAI2y70MRlwzybPmzRsn0eYeNyyAWL34Gs",
            "authDomain": "mammory.firebaseapp.com",
            "databaseURL": "https://mammory-default-rtdb.firebaseio.com/",
            "storageBucket": "mammory.appspot.com",
            "projectId": "mammory",
            "storageBucket": "mammory.appspot.com",
            "messagingSenderId": "384004541434",
            "appId": "1:384004541434:web:ff56b697112dbf634f7243",
            "measurementId": "G-SS9LV9NW51"
        }

        #initialize app
        firebase = pyrebase.initialize_app(config)

        #create an instance for storage which will be used to put the file
        storage = firebase.storage()

        #select the file to upload, pdf_file_name is the path
        pdf_file = open(pdf_file_name, "rb")
        

        #place the file & give the path. PDFs/report-14.pdf is the path to my firebase STORAGE folder where I want to save report-14.pdf
        temp_url = storage.child("PDFs/"+pdf_file_name).put(pdf_file)
        pdf_file.close()


        #to return file URL
        url = storage.child("PDFs/"+pdf_file_name).get_url(temp_url['downloadTokens'])
        print(url)
        #deleting the pdf file from system
        if os.path.exists(pdf_file_name):
            os.remove(pdf_file_name)

        
        #instance for database
        database = firebase.database()

        #adding the url to the data dictionary
        data["Report_URL"] = str(url)
        
        #To set the values in database
        database.push(data)
        return data


# if __name__ == "__main__":
#     obj = ReportGeneration()
#     pdf_file_name, data = obj.generate_report("zai","18-01","string@zain.com","12345","kill yourself",0.86,"/home/kingh/Downloads/mammory-server-main/imageprocessing.jpeg","wpw","now","mammo")
#     obj.push_to_firebase(pdf_file_name, data)



